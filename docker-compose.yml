version: '3.8'

services:
  client:
    image: client:latest
    container_name: client
    depends_on:
      - web-api
    build:
      context: client/.
      dockerfile: Dockerfile
    ports:
      - "4000:80"

  web-api:
    container_name: web-api
    image: web-api
    depends_on:
      db:
        condition: service_healthy

    build:
      context: API/
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080 # Change the default port from 80 to 8080
    ports:
      - 8080:8080

  db:
    container_name: db
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - dbdata1:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pg_admin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./devops/tempo/tempo.yaml:/etc/tempo.yaml
    depends_on:
      - web-api

  collector:
    image: otel/opentelemetry-collector-contrib:0.81.0
    container_name: collector
    command: [ "--config=/etc/collector.yaml" ]
    ports:
      - "4317:4317"
    volumes:
      - ./devops/otel/otel-collector-config.yml:/etc/collector.yaml
    depends_on:
      - tempo

  grafana:
    image: grafana/grafana:10.0.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./devops/grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - collector
      - tempo

  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

volumes:
  dbdata1:
